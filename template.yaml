AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM Template for NVA data report API

Parameters:
  # TODO: Determine access to API
  CognitoAuthorizerArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: Reference to Cognito UserPool for the stage
    Default: CognitoAuthorizerArn
  ExternalCognitoAuthorizerArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: Reference to ARN of ExternalUsers UserPool
    Default: ExternalCognitoAuthorizerArn
  CognitoAuthorizationUri:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/NVA/CognitoUri'
  ProjectName:
    Type: String
    Default: nva-data-report
  ApiDomain:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: The Api domain
    Default: /NVA/ApiDomain
  NeptuneInstanceClass:
    Type: String
    Default: db.serverless
  CustomDomainBasePath:
    Type: String
    Description: Base path mapping
    Default: report
  Suffix:
    Type: String
    Default: ''
    Description: Suffix used for naming resources for feature branches to avoid conflicts.
  ResourcesBucket:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /NVA/Events/PersistedEntriesBucketName
  ResourcesPrefix:
    Type: String
    Description: Prefix for resource files in persisted-resources bucket
    Default: resources/
  NviCandidatesPrefix:
    Type: String
    Description: Prefix for nvi-candidate files in persisted-resources bucket
    Default: nvi-candidates/
  LoaderBucketName:
    Type: 'String'
    Default: "loader-input-files"
    Description: Name of bucket for input NQuads files
  KeyBatchesBucketName:
    Type: 'String'
    Default: "data-report-key-batches"
    Description: Name of bucket for key batch files
  NviReportsBucketName:
    Type: 'String'
    Default: "nvi-reports"
    Description: Name of bucket for nvi reports
  SlackSnsArn:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/NVA/Monitoring/SlackSnsArn'
  AllowedOrigins:
    Type: String
    Description: comma separated list of external clients that are allowed to contact the HTTP APIs, "*" indicates that all origins are allowed
    Default: '*'

Mappings:
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    Public1:
      CIDR: '10.0.0.0/24'
    Public2:
      CIDR: '10.0.1.0/24'
    Private1:
      CIDR: '10.0.2.0/24'
    Private2:
      CIDR: '10.0.3.0/24'
    Lambda1:
      CIDR: '10.0.4.0/24'
    Lambda2:
      CIDR: '10.0.5.0/24'

Conditions:
  WithSuffix: !Not [ !Equals [ !Ref Suffix, '' ] ]

Globals:
  Function:
    Runtime: java21
    MemorySize: 1536
    Environment:
      Variables:
        NEPTUNE_ENDPOINT: !GetAtt NeptuneCluster.Endpoint
        NEPTUNE_READ_ENDPOINT: !GetAtt NeptuneCluster.ReadEndpoint
        API_HOST: !Ref ApiDomain
        QUERY_PATH: 'none'
        NEPTUNE_PORT: 8182

Resources:

  # ---- SQS ----
  GenerateNviInstitutionReportQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 600
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt GenerateNviInstitutionReportDLQ.Arn
        maxReceiveCount: 5
      # ---- DLQs ----
  GenerateNviInstitutionReportDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600 #14 days
  DataReportPersistedResourceDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600 #14 days
  DataLoadingDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600 #14 days

  # ---- Logging ----

  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${FetchDataReportHandler}'
      RetentionInDays: 5

  DataLoadingLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${DataLoadingHandler}'
      RetentionInDays: 5

  # ---- Policies ----

  SecretsManagerPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource:
              - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:BackendCognitoClientCredentials-*"

  DeleteS3ObjectPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 's3:DeleteObject'
            Resource:
              - !GetAtt KeyBatchesBucket.Arn

  S3ManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:Get*
              - s3:List*
              - s3:PutObject
              - events:*
            Resource: '*'

  S3NviReportsManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:Get*
              - s3:List*
              - s3:PutObject
            Resource: !Sub '${NviReportsBucket.Arn}/*'

  NeptuneManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - neptune-db:*
            Resource:
              - !Sub 'arn:aws:neptune-db:${AWS::Region}:${AWS::AccountId}:cluster:${ProjectName}/*'
  SqsManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:SendMessage
              - sqs:GetQueueAttributes
            Resource:
              - !GetAtt DataLoadingDLQ.Arn
              - !GetAtt GenerateNviInstitutionReportQueue.Arn
              - !GetAtt GenerateNviInstitutionReportDLQ.Arn
  DeployToVpnPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ec2:DescribeNetworkInterfaces
              - ec2:CreateNetworkInterface
              - ec2:DeleteNetworkInterface
              - ec2:DescribeInstances
              - ec2:AttachNetworkInterface
            Resource: '*'

  InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt DataLoadingHandler.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt PersistedResourcesEventRule.Arn

  #============================= Roles ==========================================================
  DataReportApi:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
        Format: '{ "apiId": "$context.apiId", "requestId": "$context.requestId", "requestTime": "$context.requestTime", "requestTimeEpoch": "$context.requestTimeEpoch", "httpMethod": "$context.httpMethod", "path": "$context.path", "status": "$context.status",  "error.message": "$context.error.message" }'
      StageName: Prod
      EndpointConfiguration:
        Type: REGIONAL
      DefinitionBody:
        'Fn::Transform':
          Name: AWS::Include
          Parameters:
            Location: ./docs/openapi.yaml
      BinaryMediaTypes:
        - application/vnd.ms-excel
        - application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

  ApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref FetchDataReportHandler
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${DataReportApi}/prod/GET/report"

  #===========================BasePathMappings========================================================
  BasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: !If
        - WithSuffix
        - !Sub ${CustomDomainBasePath}-${Suffix}
        - !Sub ${CustomDomainBasePath}
      DomainName: !Ref ApiDomain
      RestApiId: !Ref DataReportApi
      Stage: !Ref DataReportApi.Stage

  #===========================EventBridge Rule========================================================
  PersistedResourcesEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Trigger on create and delete events for S3 bucket persisted-resources"
      EventPattern:
        source:
          - "aws.s3"
        detail-type:
          - "Object Created"
          - "Object Deleted"
        detail:
          bucket:
            name:
              - !Ref ResourcesBucket
          object:
            key:
              - prefix: !Ref ResourcesPrefix
              - prefix: !Ref NviCandidatesPrefix
      State: ENABLED
      Targets:
        - Arn: !GetAtt DataLoadingHandler.Arn
          Id: "DataLoadingHandler"
          InputTransformer:
            InputPathsMap:
              bucketName: "$.detail.bucket.name"
              key: "$.detail.object.key"
              eventType: "$.detail.reason"
            InputTemplate: '{"bucketName": <bucketName>, "key": <key>, "eventType": <eventType>}'
          DeadLetterConfig:
            Arn: !GetAtt DataReportPersistedResourceDLQ.Arn
          RetryPolicy:
            MaximumRetryAttempts: 3

  # ---- Handler ----
  FetchDataReportHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: report-api
      Handler: no.sikt.nva.data.report.api.fetch.FetchDataReport::handleRequest
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref LambdaSubnet1
          - !Ref LambdaSubnet2
      Policies:
        - !GetAtt NeptuneManagedPolicy.PolicyArn
        - !GetAtt DeployToVpnPolicy.PolicyArn
      Timeout: 600
      MemorySize: 1536
      AutoPublishAlias: live
      Environment:
        Variables:
          ALLOWED_ORIGIN: !Ref AllowedOrigins
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /{type}
            Method: get
            RestApiId: !Ref DataReportApi

  NviInstitutionReportGenerator:
    Type: AWS::Serverless::Function
    Properties:
      Handler: no.sikt.nva.data.report.api.fetch.NviInstitutionReportGenerator::handleRequest
      CodeUri: report-api
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref LambdaSubnet1
          - !Ref LambdaSubnet2
      Policies:
        - !GetAtt NeptuneManagedPolicy.PolicyArn
        - !GetAtt DeployToVpnPolicy.PolicyArn
        - !GetAtt SqsManagedPolicy.PolicyArn
        - !GetAtt S3NviReportsManagedPolicy.PolicyArn
      Timeout: 600
      MemorySize: 1536
      AutoPublishAlias: live
      Environment:
        Variables:
          ALLOWED_ORIGIN: !Ref AllowedOrigins
          NVI_REPORTS_BUCKET: !Ref NviReportsBucket
          GRAPH_DATABASE_PAGE_SIZE: 500
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt GenerateNviInstitutionReportQueue.Arn
            BatchSize: 1
            #Note: NviInstitutionReportGenerator is implemented to handle only batch size 1.
            #Don't change the batch size value, unless you change the implementation.
      EventInvokeConfig:
        DestinationConfig:
          OnFailure:
            Type: SQS
            Destination: !GetAtt GenerateNviInstitutionReportDLQ.Arn

  FetchNviInstitutionReportPresignerHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: report-api
      Handler: no.sikt.nva.data.report.api.fetch.FetchNviInstitutionReportPresigner::handleRequest
      Policies:
        - !GetAtt SecretsManagerPolicy.PolicyArn
        - !GetAtt SqsManagedPolicy.PolicyArn
        - !GetAtt S3NviReportsManagedPolicy.PolicyArn
      Timeout: 600
      MemorySize: 1536
      AutoPublishAlias: live
      Environment:
        Variables:
          ALLOWED_ORIGIN: !Ref AllowedOrigins
          COGNITO_HOST: !Ref CognitoAuthorizationUri
          BACKEND_CLIENT_SECRET_NAME: 'BackendCognitoClientCredentials'
          NVI_REPORTS_BUCKET: !Ref NviReportsBucket
          REPORT_QUEUE_URL: !Ref GenerateNviInstitutionReportQueue
          SIGN_DURATION_IN_MINUTES: 60
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /institution/nvi-approval/{reportingYear}
            Method: get
            RestApiId: !Ref DataReportApi

  DataLoadingHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: no.sikt.nva.data.report.api.etl.SingleObjectDataLoader::handleRequest
      CodeUri: data-loading
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref LambdaSubnet1
          - !Ref LambdaSubnet2
      Policies:
        - !GetAtt S3ManagedPolicy.PolicyArn
        - !GetAtt NeptuneManagedPolicy.PolicyArn
        - !GetAtt SqsManagedPolicy.PolicyArn
        - !GetAtt DeployToVpnPolicy.PolicyArn
      Timeout: 600
      MemorySize: 1536
      AutoPublishAlias: live
      Environment:
        Variables:
          BACKEND_CLIENT_AUTH_URL: !Ref CognitoAuthorizationUri
          BACKEND_CLIENT_SECRET_NAME: 'BackendCognitoClientCredentials'
          EXPANDED_RESOURCES_BUCKET: !Ref ResourcesBucket
      EventInvokeConfig:
        DestinationConfig:
          OnFailure:
            Type: SQS
            Destination: !GetAtt DataLoadingDLQ.Arn

  BulkDataLoader:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: bulk-load
      Handler: no.sikt.nva.data.report.api.etl.loader.BulkLoadHandler::handleRequest
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref LambdaSubnet1
          - !Ref LambdaSubnet2
      Policies:
        - !GetAtt S3ManagedPolicy.PolicyArn
        - !GetAtt NeptuneManagedPolicy.PolicyArn
        - !GetAtt DeployToVpnPolicy.PolicyArn
      Timeout: 600
      MemorySize: 1536
      AutoPublishAlias: live
      Environment:
        Variables:
          LOADER_BUCKET: !Sub s3://${LoaderBucket}
          NEPTUNE_ENDPOINT: !GetAtt NeptuneCluster.Endpoint
          NEPTUNE_PORT: 8182
          LOADER_IAM_ROLE: !GetAtt ReadAndListBucketPolicy.Arn


  ResetDatabaseButton:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: database-tools
      Handler: no.sikt.nva.data.report.dbtools.DatabaseResetHandler::handleRequest
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref LambdaSubnet1
          - !Ref LambdaSubnet2
      Policies:
        - !GetAtt NeptuneManagedPolicy.PolicyArn
        - !GetAtt DeployToVpnPolicy.PolicyArn
      Timeout: 600
      MemorySize: 1536
      AutoPublishAlias: live

  #---- Generates key batches in bucket ----

  GenerateKeyBatchesHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: bulk-load
      Handler: no.sikt.nva.data.report.api.etl.transformer.GenerateKeyBatchesHandler::handleRequest
      Policies:
        - !GetAtt S3ManagedPolicy.PolicyArn
      Timeout: 600
      MemorySize: 1536
      AutoPublishAlias: live
      Environment:
        Variables:
          EVENT_BUS: !GetAtt BatchLoadEventBus.Name
          EXPANDED_RESOURCES_BUCKET: !Ref ResourcesBucket
          KEY_BATCHES_BUCKET: !Ref KeyBatchesBucket
          TOPIC: 'ReportApi.Bulk.KeyBasedBatch'
      Events:
        BatchIndexEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !GetAtt BatchLoadEventBus.Name
            Pattern:
              detail:
                topic: [ 'ReportApi.Bulk.KeyBasedBatch' ]

  BulkTransformerHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: bulk-load
      Handler: no.sikt.nva.data.report.api.etl.transformer.BulkTransformerHandler::handleRequest
      Timeout: 600
      MemorySize: 1536
      AutoPublishAlias: live
      Policies:
        - !GetAtt S3ManagedPolicy.PolicyArn
        - !GetAtt DeleteS3ObjectPolicy.PolicyArn
      Environment:
        Variables:
          EVENT_BUS: !GetAtt BatchLoadEventBus.Name
          EXPANDED_RESOURCES_BUCKET: !Ref ResourcesBucket
          KEY_BATCHES_BUCKET: !Ref KeyBatchesBucket
          LOADER_BUCKET: !Ref LoaderBucket
          TOPIC: 'ReportApi.Bulk.TransformKeyBatch'
          API_HOST: !Ref ApiDomain
      Events:
        BatchIndexEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !GetAtt BatchLoadEventBus.Name
            Pattern:
              detail:
                topic: [ 'ReportApi.Bulk.TransformKeyBatch' ]

  BulkReportGenerator:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: report-api
      Handler: no.sikt.nva.data.report.api.fetch.BulkReportGenerator::handleRequest
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref LambdaSubnet1
          - !Ref LambdaSubnet2
      Policies:
        - !GetAtt NeptuneManagedPolicy.PolicyArn
        - !GetAtt DeployToVpnPolicy.PolicyArn
      Timeout: 600
      MemorySize: 1536
      AutoPublishAlias: live

  # ---- Amazon Neptune ----
  # Two instance Amazon Neptune cluster, using default
  # parameter groups
  NeptuneCluster:
    Type: AWS::Neptune::DBCluster
    Properties:
      AssociatedRoles:
        - RoleArn: !GetAtt ReadAndListBucketPolicy.Arn
      DBClusterIdentifier: !Ref ProjectName
      DBSubnetGroupName: !Ref NeptuneSubnets
      VpcSecurityGroupIds:
        - !Ref NeptuneSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-neptune-cluster"
        - Key: Project
          Value: !Ref ProjectName
      ServerlessScalingConfiguration:
        MaxCapacity: 128
        MinCapacity: 2.5
      EnableCloudwatchLogsExports:
        - audit

  NeptuneInstance1:
    Type: AWS::Neptune::DBInstance
    Properties:
      DBClusterIdentifier: !Ref NeptuneCluster
      DBInstanceClass: !Ref NeptuneInstanceClass
      DBInstanceIdentifier: !Sub "${ProjectName}-neptune-1"
      DBSubnetGroupName: !Ref NeptuneSubnets
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-neptune-instance-1"
        - Key: Project
          Value: !Ref ProjectName

  NeptuneInstance2:
    Type: AWS::Neptune::DBInstance
    Properties:
      DBClusterIdentifier: !Ref NeptuneCluster
      DBInstanceClass: !Ref NeptuneInstanceClass
      DBInstanceIdentifier: !Sub "${ProjectName}-neptune-2"
      DBSubnetGroupName: !Ref NeptuneSubnets
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-neptune-instance-2"
        - Key: Project
          Value: !Ref ProjectName

  NeptuneSubnets:
    Type: AWS::Neptune::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub "${ProjectName} Subnet Group"
      DBSubnetGroupName: !Sub "${ProjectName}-subnet-group"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-neptune-subnet-group"
        - Key: Project
          Value: !Ref ProjectName

  NeptuneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    # DependsOn: LambdaSecurityGroup
    Properties:
      GroupName: !Sub "${ProjectName}-neptune-security-group"
      GroupDescription: Allow access to Amazon Neptune from Lambda
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8182
          ToPort: 8182
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
      VpcId: !Ref VPC
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # --- Lambda ----

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${ProjectName}-lambda-security-group"
      GroupDescription: Access from AWS Lambda to Amazon Neptune
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
      VpcId: !Ref VPC
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # ---- Networking Resources ----
  # A VPC with two public subnets and two private
  # subnets along with an internet gateway.
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap [ 'SubnetConfig', 'VPC', 'CIDR' ]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-vpc"
        - Key: Project
          Value: !Ref ProjectName

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref AWS::Region
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ 'SubnetConfig', 'Private1', 'CIDR' ]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-private-subnet-1"
        - Key: Project
          Value: !Ref ProjectName

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: !Ref AWS::Region
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ 'SubnetConfig', 'Private2', 'CIDR' ]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-private-subnet-2"
        - Key: Project
          Value: !Ref ProjectName

  LambdaSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref AWS::Region
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ 'SubnetConfig', 'Lambda1', 'CIDR' ]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-lambda-subnet-1"
        - Key: Project
          Value: !Ref ProjectName

  LambdaSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: !Ref AWS::Region
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [ 'SubnetConfig', 'Lambda2', 'CIDR' ]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-lambda-subnet-2"
        - Key: Project
          Value: !Ref ProjectName

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRouteTable1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  PrivateRouteTableLambdaAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref LambdaSubnet1

  S3GatewayEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      RouteTableIds:
        - !Ref PrivateRouteTable
      VpcEndpointType: Gateway
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:Get*'
              - 's3:List*'
              - 's3:PutObject'
            Resource: '*'

  #---- EventBus ----

  BatchLoadEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !If
        - WithSuffix
        - !Join [ "-",[ "BatchLoadEventBus", !Ref Suffix ] ]
        - "BatchLoadEventBus"

  #---- Buckets ----
  LoaderBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Sub "${LoaderBucketName}-${AWS::AccountId}"
      LifecycleConfiguration:
        Rules:
          - Id: DeleteContentAfter3Days
            Status: Enabled
            ExpirationInDays: 3

  KeyBatchesBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Sub "${KeyBatchesBucketName}-${AWS::AccountId}"
      LifecycleConfiguration:
        Rules:
          - Id: DeleteContentAfter3Days
            Status: Enabled
            ExpirationInDays: 3

  NviReportsBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Sub "${NviReportsBucketName}-${AWS::AccountId}"
      LifecycleConfiguration:
        Rules:
          - Id: DeleteContentAfter3Days
            Status: Enabled
            ExpirationInDays: 3

    #---- Role for Neptune load ----

  ReadAndListBucketPolicy:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - rds.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: listGetS3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                Resource:
                  - !GetAtt LoaderBucket.Arn
                  - !Sub '${LoaderBucket.Arn}/*'


  #============================= Alarms =========================================================

  NviInstitutionReportDLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: report-api-nvi-institution-report-dlq-alarm
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Statistic: Sum
      Dimensions:
        - Name: QueueName
          Value: !GetAtt GenerateNviInstitutionReportDLQ.QueueName
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref SlackSnsArn

#### OUTPUTS ####
Outputs:
  VpcId:
    Description: VPC ID
    Value: !Ref VPC

  NeptuneClusterEndpoint:
    Description: Endpoint for Neptune Cluster
    Value: !GetAtt NeptuneCluster.Endpoint

  NeptuneClusterReadEndpoint:
    Description: Read endpoint for Neptune Cluster
    Value: !GetAtt NeptuneCluster.ReadEndpoint
